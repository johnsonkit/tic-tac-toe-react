{"version":3,"sources":["Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","hl","onClick","value","Board","i","this","winPosition","squares","hightlightSquare","indexOf","key","rowWrapperHTML","squareWrapper","j","push","renderSquare","renderSquareAll","React","Component","calculateWinner","lines","length","a","b","c","winner","winningPath","Game","state","history","Array","fill","stepNumber","xIsNext","slice","gameResult","setState","concat","moveId","status","current","moves","map","step","move","clsssName","desc","jumpTo","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.363db350.chunk.js","sourcesContent":["import React from 'react';\nfunction Square (props) {\n  const className = props.hl ? \"square hl\" : \"square\";\n  return (\n    <button \n      className={className} \n      onClick={() => {props.onClick()}}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nexport default Square;","import React from 'react';\nimport Square from '../Square';\n\nclass Board extends React.Component {\n  // constructor(props) {\n    // super(props);\n    // this.state = {\n    //   squares: Array(9).fill(null),\n    //   xIsNext: true\n    // }\n    // this.handleClick = this.handleClick.bind(this);\n  // }\n  // handleClick (i) {\n  //   const squares = this.state.squares.slice();\n  //   if (squares[i] || calculateWinner(squares)) {\n  //     return;\n  //   }\n  //   squares[i] = this.state.xIsNext ? 'X' : 'O';\n  //   this.setState({\n  //     squares: squares,\n  //     xIsNext: !this.state.xIsNext,\n  //   });\n  // }\n\n\n  renderSquare(i) {\n\n    const { winPosition, squares } = this.props;\n    const hightlightSquare = winPosition && (winPosition.indexOf(i) > -1) ? true : false;\n    \n    return <Square \n              key={i}\n              value={squares[i]} \n              onClick={()=>this.props.onClick(i)}\n              hl={hightlightSquare}\n            />;\n  }\n\n\n  renderSquareAll() {\n    let rowWrapperHTML = [];\n    for (let i = 0; i < 3; i++) {\n      let squareWrapper = [];\n      \n      for (let j = i * 3; j < (i + 1)*3; j++) {\n        squareWrapper.push(this.renderSquare(j));\n      }\n      rowWrapperHTML.push(<div key={i} className=\"board-row\">{squareWrapper}</div>);\n    }\n\n    return rowWrapperHTML;\n  }\n\n  render() {\n    \n    return (\n      <div>\n        {this.renderSquareAll()}\n\n        {/* <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div> */}\n      </div>\n    )\n  }\n}\n\n\n\nexport default Board;","import React from 'react';\nimport Board from './Board';\nimport './Game.css';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n    }\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    const gameResult = calculateWinner(squares); // return null or an object\n   \n    // ignore the below code when the square contained the 'O' or 'X' already, or the winner is determined\n    if (squares[i] || gameResult) {\n      return;\n    }\n    \n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n\n  }\n\n  jumpTo(moveId) {\n    this.setState({\n      stepNumber: moveId,\n      xIsNext: (moveId % 2) === 0\n    })\n  }\n\n  render() {\n    const { history, stepNumber } = this.state;\n    const current = history[stepNumber];\n    const winner = calculateWinner(current.squares); // return null or an object\n\n    const moves = history.map((step, move) => {\n      const clsssName = (move === stepNumber) ? 'strong' : '';\n      const desc = move === 0 ? `Go to game start` : `Go to move #${move}`;\n      return (\n        <li key={move}> \n          <button \n            className={clsssName} \n            onClick={()=> this.jumpTo(move)}\n            >\n              {desc}\n          </button>\n        </li>\n      );\n      \n    })\n\n    let status;\n    let winPosition;\n    if (winner) {\n      status = `Winner: ${winner.winner}`;\n      winPosition = winner.winningPath;\n    } else if (this.state.stepNumber === 9) {\n      status = `Draw`;\n    } else {\n      status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => {this.handleClick(i)}}\n            winPosition={winPosition}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div className=\"game-info--title\">{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a], // 'O' or 'X'\n        winningPath: lines[i] // [0, 1, 2]\n      }\n    }\n  }\n  return null;\n}\n\nexport default Game;","import React from 'react';\nimport Game from './components/Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1>Tic Tac Toe</h1>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}